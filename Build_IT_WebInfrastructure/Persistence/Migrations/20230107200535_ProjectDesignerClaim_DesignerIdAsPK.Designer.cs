// <auto-generated />
using System;
using Build_IT_WebInfrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Build_IT_WebInfrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230107200535_ProjectDesignerClaim_DesignerIdAsPK")]
    partial class ProjectDesignerClaim_DesignerIdAsPK
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Build_IT_DataAccess.DeadLoads.Entities.Addition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(124)
                        .HasColumnType("nvarchar(124)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Additions", "DeadLoads");
                });

            modelBuilder.Entity("Build_IT_DataAccess.DeadLoads.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories", "DeadLoads");
                });

            modelBuilder.Entity("Build_IT_DataAccess.DeadLoads.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaximumDensity")
                        .HasColumnType("float");

                    b.Property<double>("MinimumDensity")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Materials", "DeadLoads");
                });

            modelBuilder.Entity("Build_IT_DataAccess.DeadLoads.Entities.MaterialAddition", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("AdditionId")
                        .HasColumnType("int");

                    b.HasKey("MaterialId", "AdditionId");

                    b.HasIndex("AdditionId");

                    b.ToTable("MaterialAdditions", "DeadLoads");
                });

            modelBuilder.Entity("Build_IT_DataAccess.DeadLoads.Entities.Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories", "DeadLoads");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Claims", "Projects");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Companies", "Projects");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.DeadLoad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("DeadLoads", "Projects");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.DeadLoadLayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DeadLoadId")
                        .HasColumnType("int");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<double?>("Length")
                        .HasColumnType("float");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousDeadLoadId")
                        .HasColumnType("int");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DeadLoadId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PreviousDeadLoadId");

                    b.ToTable("DeadLoadLayers", "Projects");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.Designer", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.ToTable("Designers", "Projects");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.ParameterInput", b =>
                {
                    b.Property<int>("ParameterId")
                        .HasColumnType("int");

                    b.Property<int>("ScriptDatatId")
                        .HasColumnType("int");

                    b.Property<int?>("ScriptDataId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ParameterId", "ScriptDatatId");

                    b.HasIndex("ScriptDataId");

                    b.ToTable("ParameterInputs", "Projects");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.ParameterInputUnit", b =>
                {
                    b.Property<int>("ParameterInputId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("ParameterInputParameterId")
                        .HasColumnType("int");

                    b.Property<int?>("ParameterInputScriptDatatId")
                        .HasColumnType("int");

                    b.Property<double>("Power")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.HasKey("ParameterInputId", "UnitId");

                    b.HasIndex("UnitId");

                    b.HasIndex("ParameterInputParameterId", "ParameterInputScriptDatatId");

                    b.ToTable("ParameterInputUnits", "Projects");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Projects", "Projects");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.ProjectDeadLoad", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("DeadLoadId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "DeadLoadId");

                    b.HasIndex("DeadLoadId");

                    b.ToTable("ProjectDeadLoads", "Projects");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.ProjectDesignerClaim", b =>
                {
                    b.Property<string>("DesignerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.HasKey("DesignerId", "ProjectId", "ClaimId");

                    b.HasIndex("ClaimId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDesignerClaims", "Projects");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.ProjectScript", b =>
                {
                    b.Property<int>("ScriptId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("ScriptId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectScripts", "Projects");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.ScriptData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("ScriptDatas", "Projects");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.UserCompany", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("UserCompanies", "Projects");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Assertion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("TestDataId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestDataId");

                    b.ToTable("Assertions", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Figure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Figures", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccordingTo")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DataValidator")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("ParameterGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ParameterOptions")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("None");

                    b.Property<int>("ScriptId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("ValueOptionSetting")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("None");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasDefaultValue("Number");

                    b.Property<string>("VisibilityValidator")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("ParameterGroupId");

                    b.HasIndex("ScriptId");

                    b.ToTable("Parameters", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.ParameterFigure", b =>
                {
                    b.Property<int>("ParameterId")
                        .HasColumnType("int");

                    b.Property<int>("FigureId")
                        .HasColumnType("int");

                    b.HasKey("ParameterId", "FigureId");

                    b.HasIndex("FigureId");

                    b.ToTable("ParameterFigures", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.ParameterGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ScriptId")
                        .HasColumnType("int");

                    b.Property<string>("VisibilityValidator")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("ScriptId");

                    b.ToTable("ParameterGroups", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.ParameterUnit", b =>
                {
                    b.Property<int>("ParameterId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<double>("Power")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.HasKey("ParameterId", "UnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("ParameterUnits", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Script", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccordingTo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime2");

                    b.Property<string>("Author")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupName")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int?>("PreviousScriptId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PreviousScriptId");

                    b.ToTable("Scripts", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.ScriptFigure", b =>
                {
                    b.Property<int>("ScriptId")
                        .HasColumnType("int");

                    b.Property<int>("FigureId")
                        .HasColumnType("int");

                    b.HasKey("ScriptId", "FigureId");

                    b.HasIndex("FigureId");

                    b.ToTable("ScriptFigures", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.ScriptGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("ScriptGroups", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.ScriptTag", b =>
                {
                    b.Property<int>("ScriptId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ScriptId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ScriptTags", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tags", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.TestData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ScriptId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScriptId");

                    b.ToTable("TestDatas", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.TestParameter", b =>
                {
                    b.Property<int>("ParameterUnitId")
                        .HasColumnType("int");

                    b.Property<int>("TestDataId")
                        .HasColumnType("int");

                    b.Property<int>("ParameterUnitParameterId")
                        .HasColumnType("int");

                    b.Property<int>("ParameterUnitUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ParameterUnitId", "TestDataId");

                    b.HasIndex("TestDataId");

                    b.HasIndex("ParameterUnitParameterId", "ParameterUnitUnitId");

                    b.ToTable("TestParameters", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Translations.ParameterGroupTranslation", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupId", "Language");

                    b.ToTable("ParameterGroupTranslations", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Translations.ParameterTranslation", b =>
                {
                    b.Property<int>("ParameterId")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("ParameterId", "Language");

                    b.ToTable("ParametersTranslations", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Translations.ScriptGroupTranslation", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ScriptGroupId")
                        .HasColumnType("int");

                    b.HasKey("GroupId", "Language");

                    b.HasIndex("ScriptGroupId");

                    b.ToTable("ScriptGroupsTranslations", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Translations.ScriptTranslation", b =>
                {
                    b.Property<int>("ScriptId")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("ScriptId", "Language");

                    b.ToTable("ScriptsTranslations", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Translations.UnitGroupTranslation", b =>
                {
                    b.Property<int>("UnitGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UnitGroupId", "Language");

                    b.ToTable("UnitGroupTranslations", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Translations.UnitTranslation", b =>
                {
                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UnitId", "Language");

                    b.ToTable("UnitsTranslations", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Translations.ValueOptionTranslation", b =>
                {
                    b.Property<int>("ValueOptionId")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ValueOptionId", "Language");

                    b.ToTable("ValueOptionsTranslations", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UnitGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitGroupId");

                    b.ToTable("Units", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.UnitGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("UnitGroups", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.ValueOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("ParameterId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParameterId");

                    b.ToTable("ValueOptions", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.ValueOptionFigure", b =>
                {
                    b.Property<int>("ValueOptionId")
                        .HasColumnType("int");

                    b.Property<int>("FigureId")
                        .HasColumnType("int");

                    b.HasKey("ValueOptionId", "FigureId");

                    b.HasIndex("FigureId");

                    b.ToTable("ValueOptionFigures", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.View", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ScriptId")
                        .HasColumnType("int");

                    b.Property<string>("ViewDefinition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ScriptId");

                    b.ToTable("Views", "Scripts");
                });

            modelBuilder.Entity("Build_IT_DataAccess.SteelProfiles.Entities.Parameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<long?>("ProfileTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileTypeId");

                    b.ToTable("Parameters", "Profiles");
                });

            modelBuilder.Entity("Build_IT_DataAccess.SteelProfiles.Entities.ParameterValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ParameterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SteelProfileId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("ParameterId");

                    b.HasIndex("SteelProfileId");

                    b.ToTable("ParameterValues", "Profiles");
                });

            modelBuilder.Entity("Build_IT_DataAccess.SteelProfiles.Entities.ProfileType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("ProfileTypes", "Profiles");
                });

            modelBuilder.Entity("Build_IT_DataAccess.SteelProfiles.Entities.SectionPoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ChamferType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ChamferX")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("ChamferY")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<long?>("ProfileTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("X")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Y")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileTypeId");

                    b.ToTable("SectionPoints", "Profiles");
                });

            modelBuilder.Entity("Build_IT_DataAccess.SteelProfiles.Entities.SteelProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<long?>("ProfileTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProfileTypeId");

                    b.ToTable("SteelProfiles", "Profiles");
                });

            modelBuilder.Entity("Build_IT_WebInfrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Build_IT_DataAccess.DeadLoads.Entities.Material", b =>
                {
                    b.HasOne("Build_IT_DataAccess.DeadLoads.Entities.Subcategory", "Subcategory")
                        .WithMany("Materials")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("Build_IT_DataAccess.DeadLoads.Entities.MaterialAddition", b =>
                {
                    b.HasOne("Build_IT_DataAccess.DeadLoads.Entities.Addition", "Addition")
                        .WithMany()
                        .HasForeignKey("AdditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Build_IT_DataAccess.DeadLoads.Entities.Material", "Material")
                        .WithMany("MaterialAdditions")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Addition");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Build_IT_DataAccess.DeadLoads.Entities.Subcategory", b =>
                {
                    b.HasOne("Build_IT_DataAccess.DeadLoads.Entities.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.DeadLoadLayer", b =>
                {
                    b.HasOne("Build_IT_DataAccess.Projects.Entites.DeadLoad", "DeadLoad")
                        .WithMany()
                        .HasForeignKey("DeadLoadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Build_IT_DataAccess.DeadLoads.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Build_IT_DataAccess.Projects.Entites.DeadLoadLayer", "PreviousDeadLoad")
                        .WithMany()
                        .HasForeignKey("PreviousDeadLoadId");

                    b.Navigation("DeadLoad");

                    b.Navigation("Material");

                    b.Navigation("PreviousDeadLoad");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.ParameterInput", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Parameter", "Parameter")
                        .WithMany()
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Build_IT_DataAccess.Projects.Entites.ScriptData", "ScriptData")
                        .WithMany()
                        .HasForeignKey("ScriptDataId");

                    b.Navigation("Parameter");

                    b.Navigation("ScriptData");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.ParameterInputUnit", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Build_IT_DataAccess.Projects.Entites.ParameterInput", "ParameterInput")
                        .WithMany()
                        .HasForeignKey("ParameterInputParameterId", "ParameterInputScriptDatatId");

                    b.Navigation("ParameterInput");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.Project", b =>
                {
                    b.HasOne("Build_IT_DataAccess.Projects.Entites.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.ProjectDeadLoad", b =>
                {
                    b.HasOne("Build_IT_DataAccess.Projects.Entites.DeadLoad", "DeadLoad")
                        .WithMany()
                        .HasForeignKey("DeadLoadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Build_IT_DataAccess.Projects.Entites.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeadLoad");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.ProjectDesignerClaim", b =>
                {
                    b.HasOne("Build_IT_DataAccess.Projects.Entites.Claim", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Build_IT_DataAccess.Projects.Entites.Designer", "Designer")
                        .WithMany()
                        .HasForeignKey("DesignerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Build_IT_DataAccess.Projects.Entites.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Designer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.ProjectScript", b =>
                {
                    b.HasOne("Build_IT_DataAccess.Projects.Entites.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Script", "Script")
                        .WithMany()
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Script");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.UserCompany", b =>
                {
                    b.HasOne("Build_IT_DataAccess.Projects.Entites.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Assertion", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.TestData", "TestData")
                        .WithMany("Assertions")
                        .HasForeignKey("TestDataId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TestData");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Parameter", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.ParameterGroup", "ParameterGroup")
                        .WithMany("Parameters")
                        .HasForeignKey("ParameterGroupId");

                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Script", "Script")
                        .WithMany("Parameters")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParameterGroup");

                    b.Navigation("Script");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.ParameterFigure", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Figure", "Figure")
                        .WithMany()
                        .HasForeignKey("FigureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Parameter", "Parameter")
                        .WithMany("ParameterFigures")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Figure");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.ParameterGroup", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Script", "Script")
                        .WithMany()
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Script");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.ParameterUnit", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Parameter", "Parameter")
                        .WithMany("ParameterUnits")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parameter");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Script", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.ScriptGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Script", "PreviousScript")
                        .WithMany()
                        .HasForeignKey("PreviousScriptId");

                    b.Navigation("Group");

                    b.Navigation("PreviousScript");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.ScriptFigure", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Figure", "Figure")
                        .WithMany()
                        .HasForeignKey("FigureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Script", "Script")
                        .WithMany()
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Figure");

                    b.Navigation("Script");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.ScriptTag", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Script", "Script")
                        .WithMany("Tags")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Script");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.TestData", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Script", "Script")
                        .WithMany()
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Script");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.TestParameter", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.TestData", "TestData")
                        .WithMany("TestParameters")
                        .HasForeignKey("TestDataId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.ParameterUnit", "ParameterUnit")
                        .WithMany()
                        .HasForeignKey("ParameterUnitParameterId", "ParameterUnitUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParameterUnit");

                    b.Navigation("TestData");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Translations.ParameterGroupTranslation", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.ParameterGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Translations.ParameterTranslation", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Parameter", "Parameter")
                        .WithMany("ParametersTranslations")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Translations.ScriptGroupTranslation", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.ParameterGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.ScriptGroup", null)
                        .WithMany("ScriptGroupTranslations")
                        .HasForeignKey("ScriptGroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Translations.ScriptTranslation", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Script", "Script")
                        .WithMany("ScriptTranslations")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Script");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Translations.UnitGroupTranslation", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.UnitGroup", "UnitGroup")
                        .WithMany("UnitGroupTranslations")
                        .HasForeignKey("UnitGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitGroup");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Translations.UnitTranslation", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Unit", "Unit")
                        .WithMany("UnitTranslations")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Translations.ValueOptionTranslation", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.ValueOption", "ValueOption")
                        .WithMany("ValueOptionsTranslations")
                        .HasForeignKey("ValueOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ValueOption");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Unit", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.UnitGroup", "UnitGroup")
                        .WithMany()
                        .HasForeignKey("UnitGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitGroup");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.ValueOption", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Parameter", "Parameter")
                        .WithMany("ValueOptions")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.ValueOptionFigure", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Figure", "Figure")
                        .WithMany()
                        .HasForeignKey("FigureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.ValueOption", "ValueOption")
                        .WithMany()
                        .HasForeignKey("ValueOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Figure");

                    b.Navigation("ValueOption");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.View", b =>
                {
                    b.HasOne("Build_IT_DataAccess.ScriptInterpreter.Entities.Script", "Script")
                        .WithMany()
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Script");
                });

            modelBuilder.Entity("Build_IT_DataAccess.SteelProfiles.Entities.Parameter", b =>
                {
                    b.HasOne("Build_IT_DataAccess.SteelProfiles.Entities.ProfileType", null)
                        .WithMany("Parameters")
                        .HasForeignKey("ProfileTypeId");
                });

            modelBuilder.Entity("Build_IT_DataAccess.SteelProfiles.Entities.ParameterValue", b =>
                {
                    b.HasOne("Build_IT_DataAccess.SteelProfiles.Entities.Parameter", "Parameter")
                        .WithMany()
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Build_IT_DataAccess.SteelProfiles.Entities.SteelProfile", null)
                        .WithMany("ParametersValues")
                        .HasForeignKey("SteelProfileId");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Build_IT_DataAccess.SteelProfiles.Entities.SectionPoint", b =>
                {
                    b.HasOne("Build_IT_DataAccess.SteelProfiles.Entities.ProfileType", null)
                        .WithMany("SectionPoints")
                        .HasForeignKey("ProfileTypeId");
                });

            modelBuilder.Entity("Build_IT_DataAccess.SteelProfiles.Entities.SteelProfile", b =>
                {
                    b.HasOne("Build_IT_DataAccess.SteelProfiles.Entities.ProfileType", null)
                        .WithMany("SteelProfiles")
                        .HasForeignKey("ProfileTypeId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Build_IT_WebInfrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Build_IT_WebInfrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Build_IT_WebInfrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Build_IT_WebInfrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Build_IT_DataAccess.DeadLoads.Entities.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("Build_IT_DataAccess.DeadLoads.Entities.Material", b =>
                {
                    b.Navigation("MaterialAdditions");
                });

            modelBuilder.Entity("Build_IT_DataAccess.DeadLoads.Entities.Subcategory", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("Build_IT_DataAccess.Projects.Entites.Company", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Parameter", b =>
                {
                    b.Navigation("ParameterFigures");

                    b.Navigation("ParameterUnits");

                    b.Navigation("ParametersTranslations");

                    b.Navigation("ValueOptions");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.ParameterGroup", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Script", b =>
                {
                    b.Navigation("Parameters");

                    b.Navigation("ScriptTranslations");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.ScriptGroup", b =>
                {
                    b.Navigation("ScriptGroupTranslations");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.TestData", b =>
                {
                    b.Navigation("Assertions");

                    b.Navigation("TestParameters");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.Unit", b =>
                {
                    b.Navigation("UnitTranslations");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.UnitGroup", b =>
                {
                    b.Navigation("UnitGroupTranslations");
                });

            modelBuilder.Entity("Build_IT_DataAccess.ScriptInterpreter.Entities.ValueOption", b =>
                {
                    b.Navigation("ValueOptionsTranslations");
                });

            modelBuilder.Entity("Build_IT_DataAccess.SteelProfiles.Entities.ProfileType", b =>
                {
                    b.Navigation("Parameters");

                    b.Navigation("SectionPoints");

                    b.Navigation("SteelProfiles");
                });

            modelBuilder.Entity("Build_IT_DataAccess.SteelProfiles.Entities.SteelProfile", b =>
                {
                    b.Navigation("ParametersValues");
                });
#pragma warning restore 612, 618
        }
    }
}
